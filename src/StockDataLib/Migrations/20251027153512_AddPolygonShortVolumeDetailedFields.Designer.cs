// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockDataLib.Data;

#nullable disable

namespace StockDataLib.Migrations
{
    [DbContext(typeof(StockDataContext))]
    [Migration("20251027153512_AddPolygonShortVolumeDetailedFields")]
    partial class AddPolygonShortVolumeDetailedFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StockDataLib.Models.BorrowFeeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AvailableShares")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("BorrowFeeData");
                });

            modelBuilder.Entity("StockDataLib.Models.FinraShortInterestData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AvgDailyVolume")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Days2Cover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SettlementDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SharesOutstanding")
                        .HasColumnType("bigint");

                    b.Property<long>("ShortInterest")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ShortInterestPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("FinraShortInterestData");
                });

            modelBuilder.Entity("StockDataLib.Models.PolygonPriceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NumberOfTransactions")
                        .HasColumnType("int");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PolygonRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("VolumeWeightedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("PolygonPriceData");
                });

            modelBuilder.Entity("StockDataLib.Models.PolygonShortInterestData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AvgDailyVolume")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DaysToCover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PolygonRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SettlementDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ShortInterest")
                        .HasColumnType("bigint");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("PolygonShortInterestData");
                });

            modelBuilder.Entity("StockDataLib.Models.PolygonShortVolumeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("AdfShortVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("AdfShortVolumeExempt")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ExemptVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("NasdaqCarteretShortVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("NasdaqCarteretShortVolumeExempt")
                        .HasColumnType("bigint");

                    b.Property<long?>("NasdaqChicagoShortVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("NasdaqChicagoShortVolumeExempt")
                        .HasColumnType("bigint");

                    b.Property<long?>("NonExemptVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("NyseShortVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("NyseShortVolumeExempt")
                        .HasColumnType("bigint");

                    b.Property<string>("PolygonRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ShortVolume")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ShortVolumeRatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("TotalVolume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("PolygonShortVolumeData");
                });

            modelBuilder.Entity("StockDataLib.Models.PriceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("PriceData");
                });

            modelBuilder.Entity("StockDataLib.Models.RedditMentionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mentions")
                        .HasColumnType("int");

                    b.Property<string>("Sentiment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TopSubreddit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("RedditMentionData");
                });

            modelBuilder.Entity("StockDataLib.Models.ShortInterestData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("SharesShort")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ShortInterest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("ShortInterestData");
                });

            modelBuilder.Entity("StockDataLib.Models.ShortPositionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("PositionChange")
                        .HasColumnType("bigint");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("ShortPositionData");
                });

            modelBuilder.Entity("StockDataLib.Models.ShortVolumeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("ShortVolume")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ShortVolumePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("ShortVolumeData");
                });

            modelBuilder.Entity("StockDataLib.Models.StockTicker", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Symbol");

                    b.ToTable("StockTickers");
                });

            modelBuilder.Entity("StockDataLib.Models.VolumeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("VolumeData");
                });

            modelBuilder.Entity("StockDataLib.Models.BorrowFeeData", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("BorrowFeeData")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.FinraShortInterestData", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("FinraShortInterestData")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.PolygonPriceData", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("PolygonPriceData")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.PolygonShortInterestData", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("PolygonShortInterestData")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.PolygonShortVolumeData", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("PolygonShortVolumeData")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.PriceData", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("PriceData")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.RedditMentionData", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("RedditMentionData")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.ShortInterestData", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("ShortInterestData")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.ShortPositionData", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("ShortPositionData")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.ShortVolumeData", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("ShortVolumeData")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.VolumeData", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("VolumeData")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.StockTicker", b =>
                {
                    b.Navigation("BorrowFeeData");

                    b.Navigation("FinraShortInterestData");

                    b.Navigation("PolygonPriceData");

                    b.Navigation("PolygonShortInterestData");

                    b.Navigation("PolygonShortVolumeData");

                    b.Navigation("PriceData");

                    b.Navigation("RedditMentionData");

                    b.Navigation("ShortInterestData");

                    b.Navigation("ShortPositionData");

                    b.Navigation("ShortVolumeData");

                    b.Navigation("VolumeData");
                });
#pragma warning restore 612, 618
        }
    }
}
