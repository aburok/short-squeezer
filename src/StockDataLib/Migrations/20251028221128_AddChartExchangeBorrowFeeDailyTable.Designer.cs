// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockDataLib.Data;

#nullable disable

namespace StockDataLib.Migrations
{
    [DbContext(typeof(StockDataContext))]
    [Migration("20251028221128_AddChartExchangeBorrowFeeDailyTable")]
    partial class AddChartExchangeBorrowFeeDailyTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeBorrowFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Available")
                        .HasColumnType("bigint");

                    b.Property<string>("ChartExchangeRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rebate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("ChartExchangeBorrowFee");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeBorrowFeeDaily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Average")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("AverageAvailable")
                        .HasColumnType("bigint");

                    b.Property<string>("ChartExchangeRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DataPointCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("MaxAvailable")
                        .HasColumnType("bigint");

                    b.Property<long>("MinAvailable")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("ChartExchangeBorrowFeeDaily");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeFailureToDeliver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChartExchangeRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cusip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("FailureToDeliver")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SettlementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("ChartExchangeFailureToDeliver");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeOptionChain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Ask")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Bid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ChartExchangeRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("Delta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Gamma")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpliedVolatility")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LastPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OpenInterest")
                        .HasColumnType("bigint");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("StrikePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Theta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Vega")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("ChartExchangeOptionChain");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeRedditMentions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChartExchangeRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Sentiment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Subreddit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThingType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("ChartExchangeRedditMentions");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeShortInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ChangeNumber")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ChangePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ChartExchangeRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("DaysToCover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShortInterestPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ShortPosition")
                        .HasColumnType("bigint");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("ChartExchangeShortInterest");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeShortVolume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Arcx")
                        .HasColumnType("bigint");

                    b.Property<long>("Bats")
                        .HasColumnType("bigint");

                    b.Property<long>("Baty")
                        .HasColumnType("bigint");

                    b.Property<string>("ChartExchangeRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("Edga")
                        .HasColumnType("bigint");

                    b.Property<long>("Edgx")
                        .HasColumnType("bigint");

                    b.Property<long>("Fs")
                        .HasColumnType("bigint");

                    b.Property<long>("Fse")
                        .HasColumnType("bigint");

                    b.Property<long>("Lt")
                        .HasColumnType("bigint");

                    b.Property<long>("Rt")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ShortVolumePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("St")
                        .HasColumnType("bigint");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("Xase")
                        .HasColumnType("bigint");

                    b.Property<long>("Xchi")
                        .HasColumnType("bigint");

                    b.Property<long>("Xcis")
                        .HasColumnType("bigint");

                    b.Property<long>("Xnas")
                        .HasColumnType("bigint");

                    b.Property<long>("Xnys")
                        .HasColumnType("bigint");

                    b.Property<long>("Xphl")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("ChartExchangeShortVolume");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeStockSplit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AnnouncementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChartExchangeRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ExDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FromFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PayableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SplitFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SplitRatio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("ToFactor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("ChartExchangeStockSplit");
                });

            modelBuilder.Entity("StockDataLib.Models.FinraShortInterestData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AvgDailyVolume")
                        .HasColumnType("bigint");

                    b.Property<string>("ChartExchangeRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Days2Cover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SettlementDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SharesOutstanding")
                        .HasColumnType("bigint");

                    b.Property<long>("ShortInterest")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ShortInterestPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StockTickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StockTickerSymbol", "Date")
                        .IsUnique();

                    b.ToTable("FinraShortInterestData");
                });

            modelBuilder.Entity("StockDataLib.Models.StockTicker", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Symbol");

                    b.ToTable("StockTickers");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeBorrowFee", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("ChartExchangeBorrowFee")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeBorrowFeeDaily", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("ChartExchangeBorrowFeeDaily")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeFailureToDeliver", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("ChartExchangeFailureToDeliver")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeOptionChain", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("ChartExchangeOptionChain")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeRedditMentions", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("ChartExchangeRedditMentions")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeShortInterest", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("ChartExchangeShortInterest")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeShortVolume", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("ChartExchangeShortVolume")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.ChartExchangeStockSplit", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("ChartExchangeStockSplit")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.FinraShortInterestData", b =>
                {
                    b.HasOne("StockDataLib.Models.StockTicker", "StockTicker")
                        .WithMany("FinraShortInterestData")
                        .HasForeignKey("StockTickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockTicker");
                });

            modelBuilder.Entity("StockDataLib.Models.StockTicker", b =>
                {
                    b.Navigation("ChartExchangeBorrowFee");

                    b.Navigation("ChartExchangeBorrowFeeDaily");

                    b.Navigation("ChartExchangeFailureToDeliver");

                    b.Navigation("ChartExchangeOptionChain");

                    b.Navigation("ChartExchangeRedditMentions");

                    b.Navigation("ChartExchangeShortInterest");

                    b.Navigation("ChartExchangeShortVolume");

                    b.Navigation("ChartExchangeStockSplit");

                    b.Navigation("FinraShortInterestData");
                });
#pragma warning restore 612, 618
        }
    }
}
